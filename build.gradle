buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "http://repo.spring.io/plugins-release" }
        maven { url "https://plugins.gradle.org/m2/" }
        maven { url 'https://maven.eveoh.nl/content/repositories/releases' }
    }

    dependencies {
        classpath 'com.moowork.gradle:gradle-node-plugin:0.12'
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.2.RELEASE'
    id 'io.spring.dependency-management' version '1.0.8.RELEASE'
    id 'com.github.kt3k.coveralls' version '2.0.1'
    id "com.moowork.node" version "1.2.0"
    id "com.moowork.grunt" version "0.13"
}

project.ext {
    aspectjVersion = '1.8.4'
}

node {

    // Version of node to use.
    version = '8.9.4'

    npmVersion = '5.6.0'

    yarnVersion = "1.3.2"

    download = true

    distBaseUrl = 'https://nodejs.org/dist'

    nodeModulesDir = file("${project.projectDir}")
}


apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'com.moowork.node'
apply from: "$rootDir/gradle/jacoco.gradle"
apply from: "$rootDir/gradle/pmd.gradle"
apply from: "$rootDir/gradle/checkstyle.gradle"

group = 'com.epam.idea'
version = '0.1-SNAPSHOT'

// Uses JDK 11
sourceCompatibility = 11
targetCompatibility = 11

compileJava { 
    options.encoding = "UTF-8"
}

repositories {
    mavenCentral()
    jcenter()
    maven { url 'http://repo.spring.io/libs-snapshot' }
    maven { url 'http://fugru.com/archiva/repository/snapshots'}
}

ext {
    hikariVersion = '2.3.2'
    jsonPathVesrion = '1.2.0'
    sl4jVersion = '1.7.10'
    assertJVersion = '1.7.1'
    springTestDbUnitVersion = '1.2.1'
    dbUnitVersion = '2.5.0'
	guavaVersion = '19.0'
    mySqlDriverVersion = '5.1.34'
}

dependencies {

    compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
    compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
    compile('org.springframework.boot:spring-boot-starter-data-jpa') {
        //exclude(module: 'hibernate-core')
        exclude(module: 'hibernate-entitymanager')
    }

    // Database (H2)
    runtime 'com.h2database:h2'

    // DataSource (HikariCP)
    compile "com.zaxxer:HikariCP:$hikariVersion"

    // MySql driver
    compile "mysql:mysql-connector-java:$mySqlDriverVersion"



    compile "org.slf4j:slf4j-simple:$sl4jVersion"

    // JSON processing
    compile 'com.fasterxml.jackson.core:jackson-core'
    compile 'com.fasterxml.jackson.core:jackson-annotations'
    compile 'com.fasterxml.jackson.core:jackson-databind'
    compile "com.fasterxml.jackson.datatype:jackson-datatype-jsr310"

    // Guava
	compile "com.google.guava:guava:$guavaVersion"


    compile group: 'org.springframework.boot', name: 'spring-boot-starter-security'
    compile 'org.springframework.security:spring-security-data'
    runtime 'org.springframework.security:spring-security-data'

    //Spring-social
    compile "org.springframework.social:spring-social-config:$springSocialVersion"
    compile "org.springframework.social:spring-social-core:$springSocialVersion"
    compile "org.springframework.social:spring-social-web:$springSocialVersion"
    compile "org.springframework.social:spring-social-facebook:$springSocialFacebookVersion"
    compile "org.springframework.social:spring-social-google:$springSocialGoogleVersion"
    compile 'com.github.weekens:spring-social-vkontakte:1.0.0.RELEASE'
    compile "org.springframework.social:spring-social-security:$springSocialSecurityVersion"

    compile 'org.springframework.boot:spring-boot-starter-security'

    compile 'org.springframework.boot:spring-boot-starter-hateoas'


    //Logging
    compile 'log4j:log4j:1.2.17'

    compile 'javax.xml.bind:jaxb-api:2.3.0'

    // Test dependencies
    testCompile('org.springframework.boot:spring-boot-starter-test') {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
    }
    testCompile "org.assertj:assertj-core:$assertJVersion"
    testCompile "com.github.springtestdbunit:spring-test-dbunit:$springTestDbUnitVersion"
    testCompile "org.dbunit:dbunit:$dbUnitVersion"

    // Adds a simple way to extract parts of a given document.
    testCompile "com.jayway.jsonpath:json-path:$jsonPathVesrion"
    testCompile "com.jayway.jsonpath:json-path-assert:$jsonPathVesrion"

}

configurations {
    providedRuntime
    compile.exclude(group: 'ch.qos.logback')
}

//---------------------------Gradle wrapper--------------------------------------------------//

/*https://docs.gradle.org/current/userguide/gradle_wrapper.html#sec:upgrading_wrapper
  gradlew wrapper --gradle-version 4.2.1
  The Gradle Wrapper is the preferred way of starting a Gradle build
  Run the following command to download and initialize the wrapper scripts: gradle wrapper
*/

wrapper {
    //gradleVersion = '6.6.1'//node plugin needs to be updated: https://github.com/srs/gradle-node-plugin/issues/351
    gradleVersion = '5.6.4'
}

//---------------------------Tests setup-----------------------------------------//

test {
    maxParallelForks = Runtime.runtime.availableProcessors()
    maxHeapSize = "1g"

    reports.html.destination = file("$reports.html.destination/unit")
    reports.junitXml.destination = file("$reports.junitXml.destination/unit")

    jacoco {
        destinationFile = file("$buildDir/reports/jacoco/unit/jacocoUnit.exec")
    }
}

test.outputs.upToDateWhen { false }

//---------------------------Integration tests setup-----------------------------------------//

sourceSets {
    integrationTest {
        java.srcDir file('src/integrationtest/java')
        resources.srcDir file('src/integrationtest/resources')
        compileClasspath = sourceSets.main.output + configurations.testRuntime + sourceSets.test.output
        runtimeClasspath = output + compileClasspath
    }
}

task integrationTest(type: Test) {
    description = 'Runs the integration tests.'
    testClassesDirs = sourceSets.integrationTest.output.getClassesDirs()
    classpath = sourceSets.integrationTest.runtimeClasspath
    reports.html.destination = file("$reports.html.destination/integration")
    reports.junitXml.destination = file("$reports.junitXml.destination/integration")

    jacoco {
        destinationFile = file("$buildDir/reports/jacoco/integration/jacocoIntegration.exec")
    }
}

check.dependsOn integrationTest

//--------------------------- Packaging --------------------------------------------------//

war {
    enabled = true
}

war {
    archiveFileName = 'idea.war'
}

/*bootWar {
	classifier = 'boot'
	mainClassName = 'com.epam.idea.Application'
	baseName = 'idea'
	version =  ''

	launchScript()
}*/

yarn.mustRunAfter clean

build.dependsOn yarn

yarn {
  environment = [
    'TMPDIR': './TMP',
    'PORT': System.getenv('PORT') || 9090
  ]
}

task stage(dependsOn: ["build"])

